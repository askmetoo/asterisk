Index: asterisk-13.4.0/apps/app_queue.c
===================================================================
--- asterisk-13.4.0.orig/apps/app_queue.c
+++ asterisk-13.4.0/apps/app_queue.c
@@ -6735,7 +6735,7 @@ static struct queue_stasis_data *queue_s
  * \param caller The channel snapshot for the caller channel in the queue.
  * \param atxfer_msg The stasis attended transfer message data.
  */
-static void log_attended_transfer(struct queue_stasis_data *queue_data, struct ast_channel_snapshot *caller,
+static void log_attended_transfer(struct queue_stasis_data *queue_data, const char *caller_uniqueid,
 		struct ast_attended_transfer_message *atxfer_msg)
 {
 	RAII_VAR(struct ast_str *, transfer_str, ast_str_create(32), ast_free);
@@ -6764,7 +6764,7 @@ static void log_attended_transfer(struct
 		return;
 	}
 
-	ast_queue_log(queue_data->queue->name, caller->uniqueid, queue_data->member->membername, "ATTENDEDTRANSFER", "%s|%ld|%ld|%d",
+	ast_queue_log(queue_data->queue->name, caller_uniqueid, queue_data->member->membername, "ATTENDEDTRANSFER", "%s|%ld|%ld|%d",
 			ast_str_buffer(transfer_str),
 			(long) (queue_data->starttime - queue_data->holdstart),
 			(long) (time(NULL) - queue_data->starttime), queue_data->caller_pos);
@@ -6850,7 +6850,7 @@ static void handle_blind_transfer(void *
 	context = transfer_msg->context;
 
 	ast_debug(3, "Detected blind transfer in queue %s\n", queue_data->queue->name);
-	ast_queue_log(queue_data->queue->name, caller_snapshot->uniqueid, queue_data->member->membername,
+	ast_queue_log(queue_data->queue->name, queue_data->caller_uniqueid, queue_data->member->membername,
 			"BLINDTRANSFER", "%s|%s|%ld|%ld|%d",
 			exten, context,
 			(long) (queue_data->starttime - queue_data->holdstart),
@@ -6913,7 +6913,7 @@ static void handle_attended_transfer(voi
 
 	ast_debug(3, "Detected attended transfer in queue %s\n", queue_data->queue->name);
 
-	log_attended_transfer(queue_data, caller_snapshot, atxfer_msg);
+	log_attended_transfer(queue_data, queue_data->caller_uniqueid, atxfer_msg);
 
 	send_agent_complete(queue_data->queue->name, caller_snapshot, member_snapshot, queue_data->member,
 			queue_data->holdstart, queue_data->starttime, queue_data->caller_uniqueid, queue_data->queue->wrapuptime, TRANSFER);
