Index: asterisk-13.4.0/include/asterisk/channel.h
===================================================================
--- asterisk-13.4.0.orig/include/asterisk/channel.h
+++ asterisk-13.4.0/include/asterisk/channel.h
@@ -4277,6 +4277,31 @@ int ast_channel_dialed_causes_add(const
  */
 void ast_channel_dialed_causes_clear(const struct ast_channel *chan);
 
+/*!
+ * \brief Tries to lock the the global channels container
+ *
+ * \param secs the number of seconds to try to acquire the lock before failing
+ * \return 0 on success
+ * \return non-zero on error
+ */
+int ast_channels_check_lock(unsigned int secs);
+
+/*!
+ * \brief Locks the global channel container
+ *
+ * \return 0 on success
+ * \return non-zero on error
+ */
+int ast_channels_lock(void);
+
+/*!
+ * \brief Unlocks the global channel container
+ *
+ * \return 0 on success
+ * \return non-zero on error
+ */
+int ast_channels_unlock(void);
+
 struct ast_flags *ast_channel_flags(struct ast_channel *chan);
 
 /*!
Index: asterisk-13.4.0/main/channel.c
===================================================================
--- asterisk-13.4.0.orig/main/channel.c
+++ asterisk-13.4.0/main/channel.c
@@ -10741,3 +10741,28 @@ int ast_channel_feature_hooks_replace(st
 {
 	return channel_feature_hooks_set_full(chan, features, 1);
 }
+
+int ast_channels_lock(void)
+{
+	return ao2_lock(channels);
+}
+
+int ast_channels_unlock(void)
+{
+	return ao2_unlock(channels);
+}
+
+int ast_channels_check_lock(unsigned int secs)
+{
+	unsigned int sleep_time_micro = 1000;
+	unsigned int n = secs * 1000000 / sleep_time_micro;
+
+	while (n--) {
+		if (!ao2_trylock(channels)) {
+			ao2_unlock(channels);
+			return 0;
+		}
+		usleep(sleep_time_micro);
+	}
+	return -1;
+}
